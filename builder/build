#!/usr/bin/env phantomjs

/**
 * This is an ugly script, full of bad practices, used to build de CasperJS
 * documentation.
 *
 */

var fs = require("fs");
phantom.casperPath = fs.workingDirectory + "/../..";
phantom.injectJs(phantom.casperPath + '/bin/bootstrap.js');
var utils = require("utils");

var casper = require("casper").create({
    // verbose: true,
    // logLevel: "debug"
});
var marked = require('./lib/marked');
var config = JSON.parse(fs.read("config.json"));
var docsRoot = fs.absolute(fs.pathJoin(phantom.casperPath, 'docs'));
var sourcesDir = fs.pathJoin(fs.workingDirectory, 'sources');
var templatesDir = fs.pathJoin(fs.workingDirectory, 'templates');
var layout = fs.pathJoin(templatesDir, 'layout.html');
var selectors = {};

// force storing current CasperJS version in global context
config.context.version = phantom.casperVersion;
config.context.year = new Date().getFullYear();

casper.on('remote.message', function(msg) {
    this.echo('Remote: ' + msg, 'COMMENT');
});

casper.replaceDomContent = function replaceDomContent(selector, content) {
    return this.evaluate(function replace(selector, content) {
        try {
            if (content === null) {
                // drop element instead of leaving it empty
                __utils__.findOne(selector).outerHTML = null;
            } else {
                __utils__.findOne(selector).innerHTML = content;
            }
            return true;
        } catch (e) {
            return false;
        }
    }, {
        selector: selector,
        content: content
    });
};

casper.replacePlaceholder = function replacePlaceholder(placeholder, value) {
    var re = new RegExp('\{{2}\s?' + placeholder + '\s?\}{2}', 'gim');
    this.page.content = this.page.content.replace(re, value);
};

casper.processTemplate = function processTemplate(content, data) {
    this.replaceDomContent('.content', content);
    if ('dom' in data) {
        this.log('processing DOM replacements', "debug");
        for (var domSelector in data.dom) {
            this.log('replacing DOM element ' + domSelector, "debug");
            this.replaceDomContent(domSelector, data.dom[domSelector]);
        }
    }
    if ('includes' in data) {
        this.log('processing template includes', "debug");
        for (var includeSelector in data.includes) {
            var includeFile = data.includes[includeSelector];
            this.log('including ' + includeFile + ' into ' + includeSelector, "debug");
            var tplContent = this.getFileContent(includeFile);
            this.replaceDomContent(includeSelector, tplContent);
        }
    }
    if ('vars' in data) {
        this.log('processing template vars', "debug");
        for (var placeholder in data.vars) {
            this.log('replacing ' + placeholder, "debug");
            this.replacePlaceholder(placeholder, data.vars[placeholder]);
        }
    }
};

casper.getFileContent = function getFileContent(file) {
    var content = fs.read(file);
    if (/\.md$/.test(file)) {
        content = marked(content);
    }
    return content;
};

casper.updateMenu = function updateMenu(path) {
    var url = fs.basename(path);
    var found = this.evaluate(function(url) {
        var found = false;
        var entries = __utils__.findAll('.navbar ul.nav li a');
        [].forEach.call(entries, function(entry) {
            var rootUrl = /([a-z0-9\-_\.]+)#?.*/.exec(entry.getAttribute('href'));
            if (rootUrl && rootUrl[1] === url) {
                entry.parentNode.classList.add('active');
                found = true;
            }
        });
        return found;
    }, { url: url });
    if (!found) {
        this.log('could not find menu with href=' + url);
    }
};

casper.start();

casper.each(config.pages, function(self, page) {
    this.thenOpen(layout, function() {
        if (!page.file) {
            return;
        }
        if (page.source) {
            // full page, no intermediate template set
            var content = this.getFileContent(fs.pathJoin(sourcesDir, page.source));
            this.replaceDomContent('.content', content);
        } else if (page.template) {
            // intermediate template processing
            var template = fs.read(fs.pathJoin(templatesDir, page.template));
            this.processTemplate(template, page.data);
        }
        // global context replacements
        for (var placeholder in config.context) {
            this.log('replacing ' + placeholder, "debug");
            this.replacePlaceholder(placeholder, config.context[placeholder]);
        }
        var file = fs.pathJoin(docsRoot, page.file);
        // update menu
        this.updateMenu(file);
        // write contents into destination file
        fs.write(file, this.page.content, 'w');
        console.log('written ' + file);
    });
});

casper.run(function() {
    this.echo('All done.', 'INFO').exit();
});
