#!/usr/bin/env phantomjs

// casperjs setup
var fs = require("fs");
phantom.casperPath = fs.workingDirectory + "/../..";
phantom.injectJs(phantom.casperPath + '/bin/bootstrap.js');

var casper = require("casper").create({
    //verbose: true,
    //logLevel: "debug"
});
var marked = require('./lib/marked');
var config = JSON.parse(fs.read("config.json"));
var docsRoot = fs.absolute(fs.pathJoin(phantom.casperPath, 'docs'));
var sourcesDir = fs.pathJoin(fs.workingDirectory, 'sources');
var templatesDir = fs.pathJoin(fs.workingDirectory, 'templates');
var layout = fs.pathJoin(templatesDir, 'layout.html');
var selectors = {};

// force storing current CasperJS version in global context
config.context.version = phantom.casperVersion;

casper.replaceDomContent = function replaceDomContent(selector, content) {
    return this.evaluate(function replace(selector, content) {
        try {
            __utils__.findOne(selector).innerHTML = content;
            return true;
        } catch (e) {
            return false;
        }
    }, {
        selector: selector,
        content: content
    });
};

casper.compileTemplate = function compileTemplate(file, data, includes) {
    var template = fs.read(fs.pathJoin(templatesDir, file));
    this.replaceDomContent('.content', template);
    for (var dataSelector in data) {
        this.replaceDomContent(dataSelector, data[dataSelector]);
    }
    for (var includeSelector in includes) {
        var includeFile = includes[includeSelector];
        var content = this.getFileContent(includeFile);
        this.replaceDomContent(includeSelector, content);
    }
};

casper.getFileContent = function getFileContent(file) {
    var content = fs.read(file);
    if (/\.md$/.test(file)) {
        content = marked(content);
    }
    return content;
};

casper.start();

casper.each(config.pages, function(self, page) {
    this.thenOpen(layout, function() {
        if (!page.file) {
            return;
        }
        if (page.source) {
            // full page, no intermediate template set
            var content = this.getFileContent(fs.pathJoin(sourcesDir, page.source));
            this.replaceDomContent('.content', content);
        } else if (page.template) {
            // intermediate template processing
            var template = this.compileTemplate(page.template, page.data || {}, page.includes || {});
        }
        var file = fs.pathJoin(docsRoot, page.file);
        fs.write(file, this.page.content, 'w');
        console.log('written ' + file);
    });
});

casper.run(function() {
    this.echo('All done.', 'INFO').exit();
});

// casper.then(function() {
//     var pageContent = this.page.content;
//     var target = null;
//     Object.keys(config.context).forEach(function(p) {
//         var re = new RegExp('\\{{2}\s?' + p + '\s?\\}{2}', 'gim');
//         pageContent = pageContent.replace(re, config.context[p]);
//     });
//     if (config.target) {
//         target = config.target;
//     } else {
//         target = this.cli.get(0) || "output.html";
//     }
//     this.echo('Saving to ' + target);
//     fs.write(target, pageContent, "w");
//     this.echo('Saved to ' + target);
// });
